{"version":3,"sources":["pages/state/components/List/index.tsx","pages/state/index.tsx"],"names":["List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","old","console","log","nextProps","nextState","count","JSON","stringify","react","React","State","context","target","id","name","onCount1","state","setState","onCount2","onChangeList","list","splice","onChangeList2","onChangeList3","onChangeZodiac","list2","onChangeZodiac2","onChangeZodiac3","onDoubleState","total","onDoubleState2","total2","title","page","_this2","setTimeout","prevProps","prevState","snapshot","onClick","map","elem","index","List_List","key","item"],"mappings":"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","file":"static/js/23.c0e58625.chunk.js","sourcesContent":["import * as React from 'react'\n\ninterface IProps {\n    count: number\n    key: any\n}\ninterface IState {}\nexport default class List extends React.Component<IProps, IState> {\n    old: any\n    constructor(props: IProps) {\n        super(props)\n        console.log('List-Component-constructor===>', this.props)\n    }\n    componentWillReceiveProps(nextProps: any) {\n        console.log(\"List-Component-willReceiveProps===>\", nextProps)\n    }\n    shouldComponentUpdate(nextProps: any, nextState: any) {\n        if (nextProps.count === this.props.count) {\n            console.log(\"List-Component-shouldComponentUpdate-没有update===>\", this.props)\n            return false\n        }\n        return true\n    }\n    componentWillUnmount() {\n        console.log('List-Component-willunmount===>', this.props)\n    }\n    render() {\n        console.log('List-Component-render===>', this.props)\n        if (this.old) {\n            console.log(\"List-Component-render==old=>\", this.old)\n        }\n        else {\n            this.old = JSON.stringify(this.props)\n        }\n        return <div>\n            {\n                this.props.count\n            }\n        </div>\n    }\n}","/**\n * setState(updater, callback)\n * 1、updater可以是对象，也可以是function,(state, props) => state\n * 2、如果updater是null或者返回null，组件不会rerender\n * 3、updater函数中的state是对组件state的引用，props是对组件props的引用，但是返回该引用同样会触发rerender\n * \n * 结论：除非setState设置null，否者只要调用setState一定会引起组件的rerender\n * forceUpdate(callback)\n * forceUpdate会跳过调用组件的shouldComponentUpdate函数，但是子组件会正常调用SCU；\n * 其余生命周期函数都会被调用\n *  */\n/**\n * 测试key的作用\n * 1、数据[1,2,3] 以index为key，        渲染出列表：新建Li1,新建Li2,新建Li3\n * 1-1、修改数据为[4,1,2,3]以index为key，渲染出列表：更新Li1为Li4，更新Li2为Li1，更新Li3为Li2，新建Li3\n * 1-2、修改数据为[1,2,4,3]以index为key，渲染出列表：不变Li1，不变Li2，更新Li3为Li4，新建Li3\n * 1-3、修改数据为[1,2,3,4]以index为key, 渲染处列表：不变Li1，不变Li2，不变Li3，新建Li4\n * \n * 2、数据[{id: 'monkey1',name:'monkey'},{id: 'cat2',name:'cat'}]，以id为key\t\t\t\t\t\t\t\t\t渲染：新建monkey，新建cat\n * 2-1、修改数据[{id: 'mouse3',name:'mouse'},{id: 'monkey1',name:'monkey'},{id: 'cat2',name:'cat'}]\t渲染：新建mouse, 不变monkey，不变cat\n * 2-2、修改数据[{id: 'monkey1',name:'monkey'},{id: 'mouse3',name:'mouse3'},{id: 'cat2',name:'cat'}]\t渲染：不变monkey，新建mouse, 不变cat\n * 2-3、修改数据[{id: 'monkey1',name:'monkey'},{id: 'cat2',name:'cat'},{id: 'mouse3',name:'mouse'}]\t渲染：不变monkey，不变cat，新建mouse\n */\n/**\n * setState是异步的，连续的setState可能造成bug\n * 可以将updater更改为function，规避bug\n * \n * 连续的setState\n * 返回对象，操作会被合并，做batch更新，造成第一次加1和第二次加1合并，只操作了一次加1\n * \n */ \nimport * as React from 'react'\nimport List from './components/List'\ninterface IProps { }\ninterface IState {\n\tcount: { [key: string]: any };\n\tlist: any[];\n\tlist2: any[]\n\ttotal: number\n\ttotal2: number\n}\nclass State extends React.Component<IProps, IState> {\n\ttarget: any = {id: 'mouse3', name: 'mouse'}\n\tconstructor(props: IProps, context: any) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcount: {\n\t\t\t\ttitle: 'monkey',\n\t\t\t\tpage: 0\n\t\t\t},\n\t\t\tlist: [1, 2, 3],\n\t\t\tlist2: [{ id: 'monkey1', name: 'monkey' }, { id: 'cat2', name: 'cat' }],\n\t\t\ttotal: 1,\n\t\t\ttotal2: 1\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({\n\t\t\t\ttotal: 3\n\t\t\t})\n\t\t}, 3000)\n\t}\n\tgetSnapshotBeforeUpdate(nextProps: any, nextState: any) {\n\t\tconsole.log(\"getSnapshot======>\", nextState)\n\t\treturn \"123\"\n\t}\n\tcomponentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\n\t\tconsole.log(\"didUpdate=====snapshot=======>\", snapshot)\n\t}\n\tonCount1 = () => {\n\t\tconsole.log(\"demo1=button====>\", this.state.count)\n\t\tthis.setState(null)\n\t}\n\tonCount2 = () => {\n\t\tconsole.log(\"count2=button====>\", this.state.count)\n\t\tthis.setState((state: IState, props: IProps) => {\n\t\t\tconsole.log(\"this.state === state===>\", this.state === state);\n\t\t\tconsole.log(\"this.props === ptops===>\", this.props === props);\n\t\t\treturn state\n\t\t})\n\t}\n\tonChangeList = () => {\n\t\tconst { list } = this.state\n\t\tlist.splice(0, 0, 4)\n\t\tthis.setState({\n\t\t\tlist\n\t\t})\n\t}\n\tonChangeList2 = () => {\n\t\tconst { list } = this.state\n\t\tlist.splice(2, 0, 4)\n\t\tthis.setState({\n\t\t\tlist\n\t\t})\n\t}\n\tonChangeList3 = () => {\n\t\tconst { list } = this.state\n\t\tlist.splice(3, 0, 4)\n\t\tthis.setState({\n\t\t\tlist\n\t\t})\n\t}\n\n\tonChangeZodiac = () => {\n\t\tconst {list2} = this.state\n\t\tlist2.splice(0, 0, this.target)\n\t\tthis.setState({\n\t\t\tlist2\n\t\t})\n\t}\n\tonChangeZodiac2 = () => {\n\t\tconst {list2} = this.state\n\t\tlist2.splice(1, 0, this.target)\n\t\tthis.setState({\n\t\t\tlist2\n\t\t})\n\t}\n\tonChangeZodiac3 = () => {\n\t\tconst {list2} = this.state\n\t\tlist2.splice(2, 0, this.target)\n\t\tthis.setState({\n\t\t\tlist2\n\t\t})\n\t}\n\tonDoubleState = () => {\n\t\tthis.setState({\n\t\t\ttotal: this.state.total + 1\n\t\t})\n\t\tthis.setState({\n\t\t\ttotal: this.state.total + 1\n\t\t})\n\t}\n\n\tonDoubleState2 = () => {\n\t\tthis.setState((state, props) => {\n\t\t\treturn {\n\t\t\t\ttotal2: state.total2 + 1\n\t\t\t}\n\t\t})\n\t\tthis.setState((state, props) => {\n\t\t\treturn {\n\t\t\t\ttotal2: state.total2 + 1\n\t\t\t}\n\t\t})\n\t}\n\n\trender() {\n\t\tconsole.log(\"states-render=====>\", this.state)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={this.onDoubleState}>\n\t\t\t\t\t\t连续setState，打印total=2\n\t\t\t\t\t</button>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.total\n\t\t\t\t\t\t}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={this.onDoubleState2}>\n\t\t\t\t\t\t连续setState，打印total2=3\n\t\t\t\t\t</button>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.total2\n\t\t\t\t\t\t}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={this.onCount1}>\n\t\t\t\t\t\tDemo1\n\t\t\t\t\t</button>\n\t\t\t\t\t<span>\n\t\t\t\t\t\tsetState设置null，不会引起组件的rerender\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={this.onCount2}>\n\t\t\t\t\t\tDemo2\n\t\t\t\t\t</button>\n\t\t\t\t\t<span>\n\t\t\t\t\t\tsetState直接返回对组件的state的引用依然会引起组件的rerender\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<span>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.count.page\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t\t<div>\n\t\t\t\t\t<h1>以index索引为key，测试react渲染优化</h1>\n\t\t\t\t\t<button onClick={this.onChangeList}>\n\t\t\t\t\t\t4123\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.onChangeList2}>\n\t\t\t\t\t\t1243\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.onChangeList3}>\n\t\t\t\t\t\t1234\n\t\t\t\t\t</button>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.list.map((elem, index) => {\n\t\t\t\t\t\t\treturn <List key={index} count={elem} />\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h1>以数据项的id为key，测试react渲染优化</h1>\n\t\t\t\t\t<button onClick={this.onChangeZodiac}>\n\t\t\t\t\t\tmouse,monkey,cat\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.onChangeZodiac2}>\n\t\t\t\t\t\tmonkey,mouse,cat\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.onChangeZodiac3}>\n\t\t\t\t\t\tmonkey,cat,mouse\n\t\t\t\t\t</button>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.list2.map((item: any, index: number) => {\n\t\t\t\t\t\t\treturn <List key={item.id} count={item.name} />\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default State;"],"sourceRoot":""}